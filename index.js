const keyLayout = [
  [
    {
      key: { ru: "—ë", en: "`" },
      shift: { ru: "–Å", en: "~" },
      code: "Backquote",
    },
    { key: { ru: "1", en: "1" }, shift: { ru: "!", en: "!" }, code: "Digit1" },
    { key: { ru: "2", en: "2" }, shift: { ru: '"', en: "@" }, code: "Digit2" },
    { key: { ru: "3", en: "3" }, shift: { ru: "‚Ññ", en: "#" }, code: "Digit3" },
    { key: { ru: "4", en: "4" }, shift: { ru: ";", en: "$" }, code: "Digit4" },
    { key: { ru: "5", en: "5" }, shift: { ru: "%", en: "%" }, code: "Digit5" },
    { key: { ru: "6", en: "6" }, shift: { ru: ":", en: "^" }, code: "Digit6" },
    { key: { ru: "7", en: "7" }, shift: { ru: "?", en: "&" }, code: "Digit7" },
    { key: { ru: "8", en: "8" }, shift: { ru: "*", en: "*" }, code: "Digit8" },
    { key: { ru: "9", en: "9" }, shift: { ru: "(", en: "(" }, code: "Digit9" },
    { key: { ru: "0", en: "0" }, shift: { ru: ")", en: ")" }, code: "Digit0" },
    { key: { ru: "-", en: "-" }, shift: { ru: "_", en: "_" }, code: "Minus" },
    { key: { ru: "=", en: "=" }, shift: { ru: "+", en: "+" }, code: "Equal" },
    {
      key: "Backspace",
      code: "Backspace",
      class: "key-backspace",
      noType: true,
    },
  ],
  [
    {
      key: "Tab",
      code: "Tab",
      class: "key-tab",
      noType: true,
    },
    { key: { ru: "–π", en: "q" }, shift: { ru: "–ô", en: "Q" }, code: "KeyQ" },
    { key: { ru: "—Ü", en: "w" }, shift: { ru: "–¶", en: "W" }, code: "KeyW" },
    { key: { ru: "—É", en: "e" }, shift: { ru: "–£", en: "E" }, code: "KeyE" },
    { key: { ru: "–∫", en: "r" }, shift: { ru: "–ö", en: "R" }, code: "KeyR" },
    { key: { ru: "–µ", en: "t" }, shift: { ru: "–ï", en: "T" }, code: "KeyT" },
    { key: { ru: "–Ω", en: "y" }, shift: { ru: "–ù", en: "Y" }, code: "KeyY" },
    { key: { ru: "–≥", en: "u" }, shift: { ru: "–ì", en: "U" }, code: "KeyU" },
    { key: { ru: "—à", en: "i" }, shift: { ru: "–®", en: "I" }, code: "KeyI" },
    { key: { ru: "—â", en: "o" }, shift: { ru: "–©", en: "O" }, code: "KeyO" },
    { key: { ru: "–∑", en: "p" }, shift: { ru: "–ó", en: "P" }, code: "KeyP" },
    {
      key: { ru: "—Ö", en: "[" },
      shift: { ru: "–•", en: "{" },
      code: "BracketLeft",
    },
    {
      key: { ru: "—ä", en: "]" },
      shift: { ru: "–™", en: "}" },
      code: "BracketRight",
    },
    {
      key: { ru: "\\", en: "\\" },
      shift: { ru: "|", en: "|" },
      code: "Backslash",
    },
  ],
  [
    {
      key: "CapsLock",
      code: "CapsLock",
      class: "key-capslock",
      noType: true,
    },
    { key: { ru: "—Ñ", en: "a" }, shift: { ru: "–§", en: "A" }, code: "KeyA" },
    { key: { ru: "—ã", en: "s" }, shift: { ru: "–´", en: "S" }, code: "KeyS" },
    { key: { ru: "–≤", en: "d" }, shift: { ru: "–í", en: "D" }, code: "KeyD" },
    { key: { ru: "–∞", en: "f" }, shift: { ru: "–ê", en: "F" }, code: "KeyF" },
    { key: { ru: "–ø", en: "g" }, shift: { ru: "–ü", en: "G" }, code: "KeyG" },
    { key: { ru: "—Ä", en: "h" }, shift: { ru: "–†", en: "H" }, code: "KeyH" },
    { key: { ru: "–æ", en: "j" }, shift: { ru: "–û", en: "J" }, code: "KeyJ" },
    { key: { ru: "–ª", en: "k" }, shift: { ru: "–õ", en: "K" }, code: "KeyK" },
    { key: { ru: "–¥", en: "l" }, shift: { ru: "–î", en: "L" }, code: "KeyL" },
    {
      key: { ru: "–∂", en: ";" },
      shift: { ru: "–ñ", en: ":" },
      code: "Semicolon",
    },
    { key: { ru: "—ç", en: "'" }, shift: { ru: "–≠", en: '"' }, code: "Quote" },
    {
      key: "Enter",
      code: "Enter",
      class: "key-enter",
      noType: true,
    },
  ],
  [
    {
      key: "Shift",
      code: "ShiftLeft",
      class: "key-leftshift",
      noType: true,
    },
    { key: { ru: "—è", en: "z" }, shift: { ru: "–Ø", en: "Z" }, code: "KeyZ" },
    { key: { ru: "—á", en: "x" }, shift: { ru: "–ß", en: "X" }, code: "KeyX" },
    { key: { ru: "—Å", en: "c" }, shift: { ru: "–°", en: "C" }, code: "KeyC" },
    { key: { ru: "–º", en: "v" }, shift: { ru: "–ú", en: "V" }, code: "KeyV" },
    { key: { ru: "–∏", en: "b" }, shift: { ru: "–ò", en: "B" }, code: "KeyB" },
    { key: { ru: "—Ç", en: "n" }, shift: { ru: "–¢", en: "N" }, code: "KeyN" },
    { key: { ru: "—å", en: "m" }, shift: { ru: "–¨", en: "M" }, code: "KeyM" },
    { key: { ru: "–±", en: "," }, shift: { ru: "–ë", en: "<" }, code: "Comma" },
    { key: { ru: "—é", en: "." }, shift: { ru: "–Æ", en: ">" }, code: "Period" },
    { key: { ru: ".", en: "/" }, shift: { ru: ",", en: "?" }, code: "Slash" },
    {
      key: "Shift",
      code: "ShiftRight",
      class: "key-rightshift",
      noType: true,
    },
    { key: "‚ñ≤", code: "ArrowUp", noType: true },
  ],
  [
    {
      key: "Ctrl",
      code: "ControlLeft",
      class: "key-leftctrl",
      noType: true,
    },
    {
      key: "Alt",
      code: "AltLeft",
      class: "key-leftalt",
      noType: true,
    },
    { key: " ", code: "Space", class: "key-space" },
    {
      key: "Alt",
      code: "AltRight",
      class: "key-rightalt",
      noType: true,
    },
    {
      key: "Ctrl",
      code: "ControlRight",
      class: "key-rightctrl",
      noType: true,
    },
    { key: "‚óÑ", code: "ArrowLeft", noType: true },
    { key: "‚ñº", code: "ArrowDown", noType: true },
    { key: "‚ñ∫", code: "ArrowRight", noType: true },
    {
      key: { ru: "üá∑üá∫", en: "üá∫üá∏" },
      code: "Lang",
      class: "key-lang",
      noType: true,
    },
  ],
];

class Keyboard {
  constructor() {
    this.lang = "en";
    this.capsLock = false;
    this.shift = false;
  }

  // Check language and caps from local storage
  languageCheck() {
    if (localStorage.getItem("lang")) {
      this.lang = localStorage.getItem("lang");
    } else {
      localStorage.setItem("lang", this.lang);
    }
  }

  // Change language (if Shift+Alt) and save new one to local storage
  languageSwitch(event) {
    if (this.lang === "en") {
      this.lang = "ru";
    } else {
      this.lang = "en";
    }
    localStorage.setItem("lang", this.lang);
    this.updateKeyboard(event);
  }

  // Caps Lock interaction
  capsActivateKey() {
    if (this.caps) {
      document.querySelector(".key-capslock").classList.add("caps_on");
    } else {
      document.querySelector(".key-capslock").classList.remove("caps_on");
    }
  }

  capsSwitch(event) {
    if (this.caps) {
      this.caps = false;
    } else {
      this.caps = true;
    }
    this.capsActivateKey();
    this.updateKeyboard(event);
  }

  // Update keyboard if switch language or pressing Shift
  updateKeyboard(event) {
    const { lang } = this;
    if (event.shiftKey || this.shift) {
      document.querySelectorAll(".key").forEach((e) => {
        if (e.dataset[`${lang}Shift`]) {
          if (this.caps) {
            e.innerHTML = e.dataset[`${lang}Shift`].toLowerCase();
          } else e.innerHTML = e.dataset[`${lang}Shift`];
        } else if (e.dataset[lang]) e.innerHTML = e.dataset[lang];
      });
    } else {
      document.querySelectorAll(".key").forEach((e) => {
        if (e.dataset[lang]) {
          if (this.caps && !(event.shiftKey || this.shift)) {
            e.innerHTML = e.dataset[lang].toUpperCase();
          } else e.innerHTML = e.dataset[lang];
        }
      });
    }
  }

  removeShift(event) {
    if (this.shift) {
      this.shift = !this.shift;
      document.querySelector(".key-leftshift").classList.remove("active");
      document.querySelector(".key-rightshift").classList.remove("active");
      this.updateKeyboard(event);
    }
  }

  generateKeyboard() {
    const keyboard = createElement("div", "", "keyboard");
    const container = createElement("div", "", "keyboard-container");
    this.languageCheck();
    // Create keyboard row by row
    for (let i = 0; i < keyLayout.length; i += 1) {
      const row = createElement("div", "", "keyboard-row");
      keyLayout[i].forEach((e) => {
        // Create basic key
        const keyLabel = e.key.ru && e.key.en ? e.key[this.lang] : e.key;
        const key = createElement("div", keyLabel, "key");
        // Add extra classes
        if (e.class) key.classList.add(e.class);
        // Add datasets to switch language and change with shift
        key.dataset.code = e.code;
        if (e.key.ru && e.key.en) {
          key.dataset.ru = e.key.ru;
          key.dataset.en = e.key.en;
        }
        if (e.shift) {
          key.dataset.ruShift = e.shift.ru;
          key.dataset.enShift = e.shift.en;
        }
        if (e.noType) {
          key.dataset.noType = true;
        }
        row.append(key);
      });
      container.append(row);
    }
    keyboard.append(container);
    return keyboard;
  }
}

const createElement = (element, innerHTML, ...classes) => {
  const newElement = document.createElement(element);
  newElement.classList.add(...classes);
  newElement.innerHTML = innerHTML;
  return newElement;
};
const testCapsLock = (event) => {
  if (event.getModifierState("CapsLock")) {
    document.querySelector(".caps_icon").classList.add("caps_on");
  } else {
    document.querySelector(".caps_icon").classList.remove("caps_on");
  }
};

const textField = createElement("textarea", "", "textarea");
const notes = createElement(
  "div",
  "<p>Change language: Shift + Alt</p>",
  "notes"
);
const keyboard = new Keyboard();

const keyPress = (event, button, code) => {
  let text = "";
  let cursor = textField.selectionStart;
  event.preventDefault();
  textField.focus();
  if (code === "CapsLock") keyboard.capsSwitch(event);
  if (
    (code === "AltLeft" && (event.shiftKey || keyboard.shift)) ||
    (code === "AltRight" && (event.shiftKey || keyboard.shift)) ||
    (code === "ShiftLeft" && event.altKey) ||
    (code === "ShiftRight" && event.altKey) ||
    code === "Lang"
  ) {
    keyboard.languageSwitch(event);
    keyboard.removeShift(event);
  }
  if (code === "ShiftLeft" || code === "ShiftRight")
    keyboard.updateKeyboard(event);
  if (code === "ArrowLeft" && cursor > 0)
    textField.setSelectionRange(cursor - 1, cursor - 1);
  if (code === "ArrowRight") {
    cursor = textField.selectionEnd;
    textField.setSelectionRange(cursor + 1, cursor + 1);
  }

  if (code === "ArrowUp") {
    const textBeforeCursor = textField.value.substring(0, cursor).split("\n");
    // if no Enters or line is longer than 57 symbols
    if (
      textBeforeCursor.length === 1 ||
      textBeforeCursor[textBeforeCursor.length - 1].length >= 69
    ) {
      cursor -= 69;
      // if prev line is longer than cursor position in current line
    } else if (
      textBeforeCursor[textBeforeCursor.length - 1].length <=
      textBeforeCursor[textBeforeCursor.length - 2].length % 69
    ) {
      cursor -= (textBeforeCursor[textBeforeCursor.length - 2].length % 69) + 1;
      // if prev line is shorter than cursor position in the current line
    } else {
      cursor -= textBeforeCursor[textBeforeCursor.length - 1].length + 1;
    }
    if (cursor < 0) cursor = 0;
    textField.setSelectionRange(cursor, cursor);
  }

  if (code === "ArrowDown") {
    cursor = textField.selectionEnd;
    const textBeforeCursor = textField.value.substring(0, cursor).split("\n");
    const textAfterCursor = textField.value
      .substring(textField.selectionEnd)
      .split("\n");
    // if no Enters or next line is longer than 57 symbols
    if (textAfterCursor.length === 1 || textAfterCursor[0].length >= 69) {
      cursor += 69;
      // if next line shorter than cursor position
    } else if (
      textBeforeCursor[textBeforeCursor.length - 1].length % 69 >
      textAfterCursor[1].length
    ) {
      cursor += textAfterCursor[0].length + textAfterCursor[1].length + 1;
      // if current line is very long
    } else if (
      textBeforeCursor[textBeforeCursor.length - 1].length +
        textAfterCursor[0].length >
      57
    ) {
      cursor += textAfterCursor[0].length;
      // if next line longer than cursor position
    } else {
      cursor +=
        (textBeforeCursor[textBeforeCursor.length - 1].length % 69) +
        textAfterCursor[0].length +
        1;
    }
    textField.setSelectionRange(cursor, cursor);
  }
  if (code === "Tab") text = "    ";
  if (code === "Enter") text = "\n";
  if (code === "Backspace") text = "-1";
  if (!button.dataset.noType) {
    text = button.textContent;
    keyboard.removeShift(event);
  }

  if (text) {
    let textBeforeCursor = textField.value.substring(0, cursor);
    const textAfterCursor = textField.value.substring(textField.selectionEnd);
    if (text === "-1") {
      text = "";
      if (cursor === textField.selectionEnd) {
        textBeforeCursor = textBeforeCursor.slice(0, -1);
        cursor -= cursor > 0 ? 2 : 1;
      } else cursor -= 1;
    }
    textField.value = textBeforeCursor + text + textAfterCursor;
    textField.setSelectionRange(cursor + 1, cursor + 1);
    if (text === "    ") textField.setSelectionRange(cursor + 4, cursor + 4);
  }
};

window.onload = () => {
  // Create DOM
  document.body.append(notes);

  document.body.append(textField);

  // Create keyboard
  document.body.append(keyboard.generateKeyboard());

  // Physical keyboard interaction
  document.addEventListener("keydown", (event) => {
    const button = document.querySelector(`[data-code=${event.code}]`);
    if (button) {
      button.classList.add("active");
      keyPress(event, button, event.code);
    }
  });

  document.addEventListener("keyup", (event) => {
    const button = document.querySelector(`[data-code=${event.code}]`);
    if (button) {
      button.classList.remove("active");
      if (event.code === "ShiftLeft" || event.code === "ShiftRight") {
        keyboard.removeShift(event);
        keyboard.updateKeyboard(event);
      }
    }
  });

  // Mouse interaction
  document.querySelector(".keyboard").addEventListener("click", (event) => {
    if (event.target.closest(".key")) {
      const button = event.target.closest(".key");
      if (
        button.dataset.code === "ShiftLeft" ||
        button.dataset.code === "ShiftRight"
      ) {
        keyboard.shift = !keyboard.shift;
        button.classList.toggle("active");
      }
      keyPress(event, button, button.dataset.code);
    }
  });
};
